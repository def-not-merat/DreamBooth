using prior class loss
full unet training
text training: True
using 8bit adamw
weaving losses
250 steps over 41 epochs
epoch: 41/41 lr: 2.5015788042424785e-06: 100%|██████████| 41/41 [09:21<00:00, 13.69s/it]
Timer unit: 1e-07 s

Total time: 561.284 s
File: C:\Users\merat\AppData\Local\Temp\ipykernel_5672\4076160739.py
Function: to_profile at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           def to_profile():
     7         1          4.0      4.0      0.0      epoch = 0
     8         1          2.0      2.0      0.0      grad_acc_counter = 0
     9         1        421.0    421.0      0.0      total_epochs = int(total_train_steps/(len(dataloader)/grad_accumilation))
    10         1       4369.0   4369.0      0.0      print(f'{"using prior class loss" if use_prior else ""}')
    11         1        158.0    158.0      0.0      print(f'{"unet using lora" if unet_use_lora else "full unet training"}')
    12         1        127.0    127.0      0.0      print(f'text training: {train_text}')
    13         1        114.0    114.0      0.0      print(f'using {"8bit " if adam8bit else ""}adamw')
    14         1        129.0    129.0      0.0      print(f'{"weaving losses" if weave_losses else ""}')
    15         1        125.0    125.0      0.0      print(f'{total_train_steps} steps over {total_epochs} epochs')
    16                                           
    17         1      39942.0  39942.0      0.0      pbar = tqdm(total=total_epochs)
    18        42        225.0      5.4      0.0      while epoch<total_epochs:
    19        41        114.0      2.8      0.0          epoch+=1
    20        41        211.0      5.1      0.0          if do_log:
    21                                                       logs = {"epoch_loss":0., "epoch_prior_loss":0., "epoch_db_loss":0.}
    22       287   80352003.0 279972.1      1.4          for step,batch in enumerate(dataloader):
    23       246   12575245.0  51118.9      0.2              timesteps = torch.randint(0, scheduler.config.num_train_timesteps, (batchsize,), device=torch_device, dtype=torch.int64)
    24                                           
    25       246     975777.0   3966.6      0.0              batch = batch.to(torch_device)
    26                                           
    27       246       3251.0     13.2      0.0              if train_text != "False":
    28       246   38093273.0 154850.7      0.7                  text_embeddings = text_encoder(text_inputs)[0]
    29       246  810174906.0    3e+06     14.4              loss = train_feed_forward(batch, timesteps, text_embeddings) / grad_accumilation
    30                                           
    31       246       4730.0     19.2      0.0              if do_log:
    32                                                           logs["epoch_db_loss"] += loss.item()
    33       246       3677.0     14.9      0.0              if weave_losses:
    34       246 1518496076.0    6e+06     27.1                  loss.backward()
    35                                           
    36       246       5031.0     20.5      0.0              if use_prior:
    37       246   17975734.0  73072.1      0.3                  class_batch = next(iter(class_dataloader))
    38       246   70065090.0 284817.4      1.2                  class_batch = class_batch.to(torch_device)
    39                                           
    40       246       5194.0     21.1      0.0                  if train_text != "False":
    41       246   28176638.0 114539.2      0.5                      class_text_embeddings = text_encoder(class_text_inputs)[0]
    42       246  813563821.0    3e+06     14.5                  prior_loss = train_feed_forward(class_batch, timesteps, class_text_embeddings) / grad_accumilation
    43       246     449794.0   1828.4      0.0                  prior_loss = prior_scaler * prior_loss 
    44                                                           
    45       246       2844.0     11.6      0.0                  if do_log:
    46                                                               logs["epoch_prior_loss"] += prior_loss.item()
    47       246       2951.0     12.0      0.0                  if weave_losses:
    48       246 1651954859.0    7e+06     29.4                      prior_loss.backward()
    49                                           
    50       246     136524.0    555.0      0.0                  loss = loss + prior_loss
    51                                           
    52       246       5983.0     24.3      0.0              if not weave_losses:
    53                                                           loss.backward()
    54                                                       
    55                                           
    56       246       1835.0      7.5      0.0              grad_acc_counter+=1
    57       246       2410.0      9.8      0.0              if grad_acc_counter==grad_accumilation:
    58       246        991.0      4.0      0.0                  grad_acc_counter=0
    59       246   17409841.0  70771.7      0.3                  torch.nn.utils.clip_grad_norm_(trainable_params, 1.0)
    60       246  547058179.0    2e+06      9.7                  optim.step()
    61       246      62261.0    253.1      0.0                  lr_scheduler.step()
    62       246    4759921.0  19349.3      0.1                  optim.zero_grad()
    63                                                   
    64                                           
    65        41        356.0      8.7      0.0          if do_log:
    66                                                       for k,v in logs.items():
    67                                                           logs[k] = v*grad_accumilation/len(dataloader)
    68                                                       logs["epoch_loss"] = logs["epoch_db_loss"] + logs["epoch_prior_loss"]
    69                                                       
    70                                                       writer.add_scalar("loss/total_loss", logs["epoch_loss"],  epoch) 
    71                                                       if use_prior:
    72                                                           writer.add_scalar("loss/db_loss", logs["epoch_db_loss"],  epoch) 
    73                                                           writer.add_scalar("loss/prior_loss", logs["epoch_prior_loss"],  epoch) 
    74                                                       pbar.set_description(f"epoch: {epoch}/{total_epochs} mean loss: {logs['epoch_loss']} lr: {lr_scheduler.get_last_lr()[0]}")
    75                                                   else:
    76        41     276506.0   6744.0      0.0              pbar.set_description(f"epoch: {epoch}/{total_epochs} lr: {lr_scheduler.get_last_lr()[0]}")
    77        41     196409.0   4790.5      0.0          pbar.update(1)
    78                                           
    79         1         33.0     33.0      0.0      if do_log:
    80                                                   writer.close()